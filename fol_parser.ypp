%language "c++"
%require "3.2"
%define api.token.constructor
%define api.value.type variant

%code requires {
    class FOLDriver;
    class Term;
    class Atom;
    class Formula;
    #include <memory>
    #include "fraction.hpp"
}

%param { FOLDriver &driver }

%code {
    #include "fol_driver.hpp"
}

%token <int> INT_T
%token <std::string> VAR_T
%token LEQ_T GEQ_T NEQ_T TRUE_T FALSE_T IMPL_T EQUI_T

%left '!' '?' '.'
%right EQUI_T
%right IMPL_T
%left '|'
%left '&'
%left '~'
%left '=' '<' '>' LEQ_T GEQ_T NEQ_T
%left '+' '-'
%left '*' '/'

%nterm <Fraction> fraction
%nterm <std::shared_ptr<Term>> term
%nterm <std::shared_ptr<Atom>> atom
%nterm <std::shared_ptr<Formula>> formula

%start complete_formula

%%

complete_formula:
    formula { driver.m_ast = std::move($1); }
;

formula:
    '~' formula { $$ = std::make_shared<Formula>(Negation(std::move($2))); }
|   formula '&' formula { $$ = std::make_shared<Formula>(Conjuction(std::move($1), std::move($3))); }
|   formula '|' formula { $$ = std::make_shared<Formula>(Disjunction(std::move($1), std::move($3))); }
|   formula IMPL_T formula { $$ = std::make_shared<Formula>(Implication(std::move($1), std::move($3))); }
|   formula EQUI_T formula { $$ = std::make_shared<Formula>(Equivalence(std::move($1), std::move($3))); }
|   '!' VAR_T '.' formula { $$ = std::make_shared<Formula>(UniversalQuantification($2, std::move($4))); }
|   '?' VAR_T '.' formula { $$ = std::make_shared<Formula>(ExistentialQuantification($2, std::move($4))); }
|   '(' formula ')' { $$ = std::move($2); }
|   atom { $$ = std::make_shared<Formula>(AtomWrapper(std::move($1))); }
|   TRUE_T { $$ = std::make_shared<Formula>(LogicConstant(true)); }
|   FALSE_T { $$ = std::make_shared<Formula>(LogicConstant(false)); }
;

atom:
    term '=' term { $$ = std::make_shared<Atom>(EqualTo(std::move($1), std::move($3))); }
|   term '<' term { $$ = std::make_shared<Atom>(LessThan(std::move($1), std::move($3))); }
|   term '>' term { $$ = std::make_shared<Atom>(GreaterThan(std::move($1), std::move($3))); }
|   term LEQ_T term { $$ = std::make_shared<Atom>(LessOrEqualTo(std::move($1), std::move($3))); }
|   term GEQ_T term { $$ = std::make_shared<Atom>(GreaterOrEqualTo(std::move($1), std::move($3))); }
|   term NEQ_T term { $$ = std::make_shared<Atom>(NotEqualTo(std::move($1), std::move($3))); }
;

term:
    term '+' term { $$ = std::make_shared<Term>(Addition(std::move($1), std::move($3))); }
|   term '-' term { $$ = std::make_shared<Term>(Subtraction(std::move($1), std::move($3))); }
|   fraction '*' VAR_T { $$ = std::make_shared<Term>(Variable($1, $3)); }
|   VAR_T { $$ = std::make_shared<Term>(Variable(Fraction(1, 1), $1)); }
|   fraction { $$ = std::make_shared<Term>(RationalNumber($1)); }
;

fraction:
    INT_T { $$ = Fraction($1); }
|   INT_T '/' INT_T { $$ = Fraction($1, $3); }
;

%%

void yy::parser::error(const std::string &message)
{

}
